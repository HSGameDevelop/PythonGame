図形の描画：　https://imagingsolution.net/program/python/tkinter/canvas_drawing_lines_circles_shapes/

円の描画：　https://natu-ym.com/python-canvas-arc-oval/

当たり判定：　https://yttm-work.jp/collision/collision_0008.html



覚書  武器用の攻撃範囲で利用すると思われるDataに攻撃範囲が何°かを設定表に入力
  pi = 180
  5 * pi / 6 = 150°
  2 * pi / 3 = 120°
  pi / 2 = 90°
  pi / 3 = 60°
  pi / 4 = 45°
  pi / 6 = 30°
  pi / 9 = 20°
  pi / 10 = 18°
  pi / 12 = 15°
  pi / 18 = 10°

list = [unit_id, action_number(1ターンで何回目の行動か), consumption(行動力消費量), x, y(移動先(今いる場所)), weapon_direction(武器向き), weapon(武器), shield_direction(盾向き), shield(盾)]

行動の優先順位攻撃範囲に敵がいれば、以降、移動を無視して、攻撃、
回避方法は、攻撃範囲の方向を変更しての移動。

一応、一括移動（ex.初期値(18,20)から(16,18)に移動を選択）の場合は、
初期の武器方向を保持したまま移動する。

データとしては上記のものだけで成立する？
行動消費量は防御（auto）でも減るため予想とは違った行動が起こる可能性あり（後の行動で武器の方向を変えて相手から外した場合、移動が優先される。）
最終的に選択ユニットの1ターン行動を全部ぼかして見通せる感じのものにする。（武器の向き、盾の向き含めて）

ターンコマンド
・固有コマンド（建物破壊等の設置型）
・移動（移動先の指定ー＞武器・武器方向・防御・防御方向を選択しつつ）
・待機（潜　伏ー＞武器・武器方向・防御・防御方向を選択できる）
・追跡移動（これは敵が見えてからじゃないとできない。あるいは、マップ上に敵が隠れていなかったら、表示されるので、特定のユニットを選んで向かっていく行動消費を抑えてという設定にする。）


あと、ユニットの移動マスと視覚マスが多いのか
そこの動作が少し重たい（正しい感じの処理に変更すると軽くなった）

